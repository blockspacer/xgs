// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_INCLUDED_login_2eproto
#define PROTOBUF_INCLUDED_login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_login_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_login_2eproto();
namespace protos {
class CLLogin;
class CLLoginDefaultTypeInternal;
extern CLLoginDefaultTypeInternal _CLLogin_default_instance_;
class CLLoginAccount;
class CLLoginAccountDefaultTypeInternal;
extern CLLoginAccountDefaultTypeInternal _CLLoginAccount_default_instance_;
class CLServerList;
class CLServerListDefaultTypeInternal;
extern CLServerListDefaultTypeInternal _CLServerList_default_instance_;
class LCLogin;
class LCLoginDefaultTypeInternal;
extern LCLoginDefaultTypeInternal _LCLogin_default_instance_;
class LCLoginAccount;
class LCLoginAccountDefaultTypeInternal;
extern LCLoginAccountDefaultTypeInternal _LCLoginAccount_default_instance_;
class LCServerList;
class LCServerListDefaultTypeInternal;
extern LCServerListDefaultTypeInternal _LCServerList_default_instance_;
class LCServerList_PlayerInfo;
class LCServerList_PlayerInfoDefaultTypeInternal;
extern LCServerList_PlayerInfoDefaultTypeInternal _LCServerList_PlayerInfo_default_instance_;
class LCServerList_ServerInfo;
class LCServerList_ServerInfoDefaultTypeInternal;
extern LCServerList_ServerInfoDefaultTypeInternal _LCServerList_ServerInfo_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
template<> ::protos::CLLogin* Arena::CreateMaybeMessage<::protos::CLLogin>(Arena*);
template<> ::protos::CLLoginAccount* Arena::CreateMaybeMessage<::protos::CLLoginAccount>(Arena*);
template<> ::protos::CLServerList* Arena::CreateMaybeMessage<::protos::CLServerList>(Arena*);
template<> ::protos::LCLogin* Arena::CreateMaybeMessage<::protos::LCLogin>(Arena*);
template<> ::protos::LCLoginAccount* Arena::CreateMaybeMessage<::protos::LCLoginAccount>(Arena*);
template<> ::protos::LCServerList* Arena::CreateMaybeMessage<::protos::LCServerList>(Arena*);
template<> ::protos::LCServerList_PlayerInfo* Arena::CreateMaybeMessage<::protos::LCServerList_PlayerInfo>(Arena*);
template<> ::protos::LCServerList_ServerInfo* Arena::CreateMaybeMessage<::protos::LCServerList_ServerInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protos {

enum LCServerList_ServerState {
  LCServerList_ServerState_CLOSE = 0,
  LCServerList_ServerState_OPEN = 1,
  LCServerList_ServerState_LCServerList_ServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  LCServerList_ServerState_LCServerList_ServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool LCServerList_ServerState_IsValid(int value);
const LCServerList_ServerState LCServerList_ServerState_ServerState_MIN = LCServerList_ServerState_CLOSE;
const LCServerList_ServerState LCServerList_ServerState_ServerState_MAX = LCServerList_ServerState_OPEN;
const int LCServerList_ServerState_ServerState_ARRAYSIZE = LCServerList_ServerState_ServerState_MAX + 1;

const ::google::protobuf::EnumDescriptor* LCServerList_ServerState_descriptor();
inline const ::std::string& LCServerList_ServerState_Name(LCServerList_ServerState value) {
  return ::google::protobuf::internal::NameOfEnum(
    LCServerList_ServerState_descriptor(), value);
}
inline bool LCServerList_ServerState_Parse(
    const ::std::string& name, LCServerList_ServerState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LCServerList_ServerState>(
    LCServerList_ServerState_descriptor(), name, value);
}
// ===================================================================

class CLLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLLogin) */ {
 public:
  CLLogin();
  virtual ~CLLogin();

  CLLogin(const CLLogin& from);

  inline CLLogin& operator=(const CLLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLLogin(CLLogin&& from) noexcept
    : CLLogin() {
    *this = ::std::move(from);
  }

  inline CLLogin& operator=(CLLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLLogin* internal_default_instance() {
    return reinterpret_cast<const CLLogin*>(
               &_CLLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CLLogin* other);
  friend void swap(CLLogin& a, CLLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLLogin* New() const final {
    return CreateMaybeMessage<CLLogin>(nullptr);
  }

  CLLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLLogin& from);
  void MergeFrom(const CLLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceid = 1;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int64 client_sessionid = 3;
  void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 3;
  ::google::protobuf::int64 client_sessionid() const;
  void set_client_sessionid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protos.CLLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int64 client_sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LCLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCLogin) */ {
 public:
  LCLogin();
  virtual ~LCLogin();

  LCLogin(const LCLogin& from);

  inline LCLogin& operator=(const LCLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCLogin(LCLogin&& from) noexcept
    : LCLogin() {
    *this = ::std::move(from);
  }

  inline LCLogin& operator=(LCLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCLogin* internal_default_instance() {
    return reinterpret_cast<const LCLogin*>(
               &_LCLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LCLogin* other);
  friend void swap(LCLogin& a, LCLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCLogin* New() const final {
    return CreateMaybeMessage<LCLogin>(nullptr);
  }

  LCLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCLogin& from);
  void MergeFrom(const LCLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_key = 5;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 5;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // string user_token = 6;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 6;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  #if LANG_CXX11
  void set_user_token(::std::string&& value);
  #endif
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int64 client_sessionid = 4;
  void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 4;
  ::google::protobuf::int64 client_sessionid() const;
  void set_client_sessionid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 client_sessionid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CLLoginAccount :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLLoginAccount) */ {
 public:
  CLLoginAccount();
  virtual ~CLLoginAccount();

  CLLoginAccount(const CLLoginAccount& from);

  inline CLLoginAccount& operator=(const CLLoginAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLLoginAccount(CLLoginAccount&& from) noexcept
    : CLLoginAccount() {
    *this = ::std::move(from);
  }

  inline CLLoginAccount& operator=(CLLoginAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLLoginAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLLoginAccount* internal_default_instance() {
    return reinterpret_cast<const CLLoginAccount*>(
               &_CLLoginAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CLLoginAccount* other);
  friend void swap(CLLoginAccount& a, CLLoginAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLLoginAccount* New() const final {
    return CreateMaybeMessage<CLLoginAccount>(nullptr);
  }

  CLLoginAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLLoginAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLLoginAccount& from);
  void MergeFrom(const CLLoginAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLLoginAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string deviceid = 3;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 3;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int64 client_sessionid = 5;
  void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 5;
  ::google::protobuf::int64 client_sessionid() const;
  void set_client_sessionid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protos.CLLoginAccount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int64 client_sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LCLoginAccount :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCLoginAccount) */ {
 public:
  LCLoginAccount();
  virtual ~LCLoginAccount();

  LCLoginAccount(const LCLoginAccount& from);

  inline LCLoginAccount& operator=(const LCLoginAccount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCLoginAccount(LCLoginAccount&& from) noexcept
    : LCLoginAccount() {
    *this = ::std::move(from);
  }

  inline LCLoginAccount& operator=(LCLoginAccount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCLoginAccount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCLoginAccount* internal_default_instance() {
    return reinterpret_cast<const LCLoginAccount*>(
               &_LCLoginAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LCLoginAccount* other);
  friend void swap(LCLoginAccount& a, LCLoginAccount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCLoginAccount* New() const final {
    return CreateMaybeMessage<LCLoginAccount>(nullptr);
  }

  LCLoginAccount* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCLoginAccount>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCLoginAccount& from);
  void MergeFrom(const LCLoginAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCLoginAccount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_key = 5;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 5;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // string user_token = 6;
  void clear_user_token();
  static const int kUserTokenFieldNumber = 6;
  const ::std::string& user_token() const;
  void set_user_token(const ::std::string& value);
  #if LANG_CXX11
  void set_user_token(::std::string&& value);
  #endif
  void set_user_token(const char* value);
  void set_user_token(const char* value, size_t size);
  ::std::string* mutable_user_token();
  ::std::string* release_user_token();
  void set_allocated_user_token(::std::string* user_token);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int64 client_sessionid = 4;
  void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 4;
  ::google::protobuf::int64 client_sessionid() const;
  void set_client_sessionid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCLoginAccount)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::google::protobuf::internal::ArenaStringPtr user_token_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int64 client_sessionid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class CLServerList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLServerList) */ {
 public:
  CLServerList();
  virtual ~CLServerList();

  CLServerList(const CLServerList& from);

  inline CLServerList& operator=(const CLServerList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLServerList(CLServerList&& from) noexcept
    : CLServerList() {
    *this = ::std::move(from);
  }

  inline CLServerList& operator=(CLServerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLServerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLServerList* internal_default_instance() {
    return reinterpret_cast<const CLServerList*>(
               &_CLServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CLServerList* other);
  friend void swap(CLServerList& a, CLServerList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLServerList* New() const final {
    return CreateMaybeMessage<CLServerList>(nullptr);
  }

  CLServerList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLServerList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLServerList& from);
  void MergeFrom(const CLServerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLServerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protos.CLServerList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LCServerList_PlayerInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCServerList.PlayerInfo) */ {
 public:
  LCServerList_PlayerInfo();
  virtual ~LCServerList_PlayerInfo();

  LCServerList_PlayerInfo(const LCServerList_PlayerInfo& from);

  inline LCServerList_PlayerInfo& operator=(const LCServerList_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCServerList_PlayerInfo(LCServerList_PlayerInfo&& from) noexcept
    : LCServerList_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline LCServerList_PlayerInfo& operator=(LCServerList_PlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCServerList_PlayerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCServerList_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const LCServerList_PlayerInfo*>(
               &_LCServerList_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LCServerList_PlayerInfo* other);
  friend void swap(LCServerList_PlayerInfo& a, LCServerList_PlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCServerList_PlayerInfo* New() const final {
    return CreateMaybeMessage<LCServerList_PlayerInfo>(nullptr);
  }

  LCServerList_PlayerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCServerList_PlayerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCServerList_PlayerInfo& from);
  void MergeFrom(const LCServerList_PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCServerList_PlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 guid = 1;
  void clear_guid();
  static const int kGuidFieldNumber = 1;
  ::google::protobuf::int64 guid() const;
  void set_guid(::google::protobuf::int64 value);

  // int32 portraitid = 3;
  void clear_portraitid();
  static const int kPortraitidFieldNumber = 3;
  ::google::protobuf::int32 portraitid() const;
  void set_portraitid(::google::protobuf::int32 value);

  // int32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCServerList.PlayerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 guid_;
  ::google::protobuf::int32 portraitid_;
  ::google::protobuf::int32 level_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LCServerList_ServerInfo :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCServerList.ServerInfo) */ {
 public:
  LCServerList_ServerInfo();
  virtual ~LCServerList_ServerInfo();

  LCServerList_ServerInfo(const LCServerList_ServerInfo& from);

  inline LCServerList_ServerInfo& operator=(const LCServerList_ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCServerList_ServerInfo(LCServerList_ServerInfo&& from) noexcept
    : LCServerList_ServerInfo() {
    *this = ::std::move(from);
  }

  inline LCServerList_ServerInfo& operator=(LCServerList_ServerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCServerList_ServerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCServerList_ServerInfo* internal_default_instance() {
    return reinterpret_cast<const LCServerList_ServerInfo*>(
               &_LCServerList_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LCServerList_ServerInfo* other);
  friend void swap(LCServerList_ServerInfo& a, LCServerList_ServerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCServerList_ServerInfo* New() const final {
    return CreateMaybeMessage<LCServerList_ServerInfo>(nullptr);
  }

  LCServerList_ServerInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCServerList_ServerInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCServerList_ServerInfo& from);
  void MergeFrom(const LCServerList_ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCServerList_ServerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string addr = 4;
  void clear_addr();
  static const int kAddrFieldNumber = 4;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // .protos.LCServerList.PlayerInfo player_info = 5;
  bool has_player_info() const;
  void clear_player_info();
  static const int kPlayerInfoFieldNumber = 5;
  const ::protos::LCServerList_PlayerInfo& player_info() const;
  ::protos::LCServerList_PlayerInfo* release_player_info();
  ::protos::LCServerList_PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::protos::LCServerList_PlayerInfo* player_info);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .protos.LCServerList.ServerState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::protos::LCServerList_ServerState state() const;
  void set_state(::protos::LCServerList_ServerState value);

  // @@protoc_insertion_point(class_scope:protos.LCServerList.ServerInfo)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::protos::LCServerList_PlayerInfo* player_info_;
  ::google::protobuf::int32 id_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// -------------------------------------------------------------------

class LCServerList :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCServerList) */ {
 public:
  LCServerList();
  virtual ~LCServerList();

  LCServerList(const LCServerList& from);

  inline LCServerList& operator=(const LCServerList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCServerList(LCServerList&& from) noexcept
    : LCServerList() {
    *this = ::std::move(from);
  }

  inline LCServerList& operator=(LCServerList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCServerList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCServerList* internal_default_instance() {
    return reinterpret_cast<const LCServerList*>(
               &_LCServerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(LCServerList* other);
  friend void swap(LCServerList& a, LCServerList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCServerList* New() const final {
    return CreateMaybeMessage<LCServerList>(nullptr);
  }

  LCServerList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCServerList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCServerList& from);
  void MergeFrom(const LCServerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCServerList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LCServerList_PlayerInfo PlayerInfo;
  typedef LCServerList_ServerInfo ServerInfo;

  typedef LCServerList_ServerState ServerState;
  static const ServerState CLOSE =
    LCServerList_ServerState_CLOSE;
  static const ServerState OPEN =
    LCServerList_ServerState_OPEN;
  static inline bool ServerState_IsValid(int value) {
    return LCServerList_ServerState_IsValid(value);
  }
  static const ServerState ServerState_MIN =
    LCServerList_ServerState_ServerState_MIN;
  static const ServerState ServerState_MAX =
    LCServerList_ServerState_ServerState_MAX;
  static const int ServerState_ARRAYSIZE =
    LCServerList_ServerState_ServerState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ServerState_descriptor() {
    return LCServerList_ServerState_descriptor();
  }
  static inline const ::std::string& ServerState_Name(ServerState value) {
    return LCServerList_ServerState_Name(value);
  }
  static inline bool ServerState_Parse(const ::std::string& name,
      ServerState* value) {
    return LCServerList_ServerState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .protos.LCServerList.ServerInfo server_list = 3;
  int server_list_size() const;
  void clear_server_list();
  static const int kServerListFieldNumber = 3;
  ::protos::LCServerList_ServerInfo* mutable_server_list(int index);
  ::google::protobuf::RepeatedPtrField< ::protos::LCServerList_ServerInfo >*
      mutable_server_list();
  const ::protos::LCServerList_ServerInfo& server_list(int index) const;
  ::protos::LCServerList_ServerInfo* add_server_list();
  const ::google::protobuf::RepeatedPtrField< ::protos::LCServerList_ServerInfo >&
      server_list() const;

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCServerList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protos::LCServerList_ServerInfo > server_list_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CLLogin

// string deviceid = 1;
inline void CLLogin::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLogin::deviceid() const {
  // @@protoc_insertion_point(field_get:protos.CLLogin.deviceid)
  return deviceid_.GetNoArena();
}
inline void CLLogin::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLogin.deviceid)
}
#if LANG_CXX11
inline void CLLogin::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLogin.deviceid)
}
#endif
inline void CLLogin::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLogin.deviceid)
}
inline void CLLogin::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLogin.deviceid)
}
inline ::std::string* CLLogin::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLogin.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLogin::release_deviceid() {
  // @@protoc_insertion_point(field_release:protos.CLLogin.deviceid)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLogin::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLogin.deviceid)
}

// string ip = 2;
inline void CLLogin::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLogin::ip() const {
  // @@protoc_insertion_point(field_get:protos.CLLogin.ip)
  return ip_.GetNoArena();
}
inline void CLLogin::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLogin.ip)
}
#if LANG_CXX11
inline void CLLogin::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLogin.ip)
}
#endif
inline void CLLogin::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLogin.ip)
}
inline void CLLogin::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLogin.ip)
}
inline ::std::string* CLLogin::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLogin.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLogin::release_ip() {
  // @@protoc_insertion_point(field_release:protos.CLLogin.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLogin::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLogin.ip)
}

// int64 client_sessionid = 3;
inline void CLLogin::clear_client_sessionid() {
  client_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 CLLogin::client_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.CLLogin.client_sessionid)
  return client_sessionid_;
}
inline void CLLogin::set_client_sessionid(::google::protobuf::int64 value) {
  
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.CLLogin.client_sessionid)
}

// -------------------------------------------------------------------

// LCLogin

// int32 error = 1;
inline void LCLogin::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCLogin::error() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.error)
  return error_;
}
inline void LCLogin::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLogin.error)
}

// string errmsg = 2;
inline void LCLogin::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLogin::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCLogin::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLogin.errmsg)
}
#if LANG_CXX11
inline void LCLogin::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLogin.errmsg)
}
#endif
inline void LCLogin::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLogin.errmsg)
}
inline void LCLogin::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLogin.errmsg)
}
inline ::std::string* LCLogin::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLogin.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLogin::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCLogin.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLogin::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLogin.errmsg)
}

// int64 userid = 3;
inline void LCLogin::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLogin::userid() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.userid)
  return userid_;
}
inline void LCLogin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLogin.userid)
}

// int64 client_sessionid = 4;
inline void LCLogin::clear_client_sessionid() {
  client_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLogin::client_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.client_sessionid)
  return client_sessionid_;
}
inline void LCLogin::set_client_sessionid(::google::protobuf::int64 value) {
  
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLogin.client_sessionid)
}

// string login_key = 5;
inline void LCLogin::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLogin::login_key() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.login_key)
  return login_key_.GetNoArena();
}
inline void LCLogin::set_login_key(const ::std::string& value) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLogin.login_key)
}
#if LANG_CXX11
inline void LCLogin::set_login_key(::std::string&& value) {
  
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLogin.login_key)
}
#endif
inline void LCLogin::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLogin.login_key)
}
inline void LCLogin::set_login_key(const char* value, size_t size) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLogin.login_key)
}
inline ::std::string* LCLogin::mutable_login_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLogin.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLogin::release_login_key() {
  // @@protoc_insertion_point(field_release:protos.LCLogin.login_key)
  
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLogin::set_allocated_login_key(::std::string* login_key) {
  if (login_key != nullptr) {
    
  } else {
    
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLogin.login_key)
}

// string user_token = 6;
inline void LCLogin::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLogin::user_token() const {
  // @@protoc_insertion_point(field_get:protos.LCLogin.user_token)
  return user_token_.GetNoArena();
}
inline void LCLogin::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLogin.user_token)
}
#if LANG_CXX11
inline void LCLogin::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLogin.user_token)
}
#endif
inline void LCLogin::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLogin.user_token)
}
inline void LCLogin::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLogin.user_token)
}
inline ::std::string* LCLogin::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLogin.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLogin::release_user_token() {
  // @@protoc_insertion_point(field_release:protos.LCLogin.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLogin::set_allocated_user_token(::std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLogin.user_token)
}

// -------------------------------------------------------------------

// CLLoginAccount

// string username = 1;
inline void CLLoginAccount::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLoginAccount::username() const {
  // @@protoc_insertion_point(field_get:protos.CLLoginAccount.username)
  return username_.GetNoArena();
}
inline void CLLoginAccount::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLoginAccount.username)
}
#if LANG_CXX11
inline void CLLoginAccount::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLoginAccount.username)
}
#endif
inline void CLLoginAccount::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLoginAccount.username)
}
inline void CLLoginAccount::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLoginAccount.username)
}
inline ::std::string* CLLoginAccount::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLoginAccount.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLoginAccount::release_username() {
  // @@protoc_insertion_point(field_release:protos.CLLoginAccount.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLoginAccount::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginAccount.username)
}

// string password = 2;
inline void CLLoginAccount::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLoginAccount::password() const {
  // @@protoc_insertion_point(field_get:protos.CLLoginAccount.password)
  return password_.GetNoArena();
}
inline void CLLoginAccount::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLoginAccount.password)
}
#if LANG_CXX11
inline void CLLoginAccount::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLoginAccount.password)
}
#endif
inline void CLLoginAccount::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLoginAccount.password)
}
inline void CLLoginAccount::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLoginAccount.password)
}
inline ::std::string* CLLoginAccount::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLoginAccount.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLoginAccount::release_password() {
  // @@protoc_insertion_point(field_release:protos.CLLoginAccount.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLoginAccount::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginAccount.password)
}

// string deviceid = 3;
inline void CLLoginAccount::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLoginAccount::deviceid() const {
  // @@protoc_insertion_point(field_get:protos.CLLoginAccount.deviceid)
  return deviceid_.GetNoArena();
}
inline void CLLoginAccount::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLoginAccount.deviceid)
}
#if LANG_CXX11
inline void CLLoginAccount::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLoginAccount.deviceid)
}
#endif
inline void CLLoginAccount::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLoginAccount.deviceid)
}
inline void CLLoginAccount::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLoginAccount.deviceid)
}
inline ::std::string* CLLoginAccount::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLoginAccount.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLoginAccount::release_deviceid() {
  // @@protoc_insertion_point(field_release:protos.CLLoginAccount.deviceid)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLoginAccount::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginAccount.deviceid)
}

// string ip = 4;
inline void CLLoginAccount::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLLoginAccount::ip() const {
  // @@protoc_insertion_point(field_get:protos.CLLoginAccount.ip)
  return ip_.GetNoArena();
}
inline void CLLoginAccount::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLLoginAccount.ip)
}
#if LANG_CXX11
inline void CLLoginAccount::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLLoginAccount.ip)
}
#endif
inline void CLLoginAccount::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLLoginAccount.ip)
}
inline void CLLoginAccount::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLLoginAccount.ip)
}
inline ::std::string* CLLoginAccount::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLLoginAccount.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLLoginAccount::release_ip() {
  // @@protoc_insertion_point(field_release:protos.CLLoginAccount.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLLoginAccount::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginAccount.ip)
}

// int64 client_sessionid = 5;
inline void CLLoginAccount::clear_client_sessionid() {
  client_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 CLLoginAccount::client_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.CLLoginAccount.client_sessionid)
  return client_sessionid_;
}
inline void CLLoginAccount::set_client_sessionid(::google::protobuf::int64 value) {
  
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.CLLoginAccount.client_sessionid)
}

// -------------------------------------------------------------------

// LCLoginAccount

// int32 error = 1;
inline void LCLoginAccount::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCLoginAccount::error() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.error)
  return error_;
}
inline void LCLoginAccount::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.error)
}

// string errmsg = 2;
inline void LCLoginAccount::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginAccount::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCLoginAccount::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.errmsg)
}
#if LANG_CXX11
inline void LCLoginAccount::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginAccount.errmsg)
}
#endif
inline void LCLoginAccount::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginAccount.errmsg)
}
inline void LCLoginAccount::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginAccount.errmsg)
}
inline ::std::string* LCLoginAccount::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginAccount.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginAccount::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCLoginAccount.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginAccount::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginAccount.errmsg)
}

// int64 userid = 3;
inline void LCLoginAccount::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLoginAccount::userid() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.userid)
  return userid_;
}
inline void LCLoginAccount::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.userid)
}

// int64 client_sessionid = 4;
inline void LCLoginAccount::clear_client_sessionid() {
  client_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLoginAccount::client_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.client_sessionid)
  return client_sessionid_;
}
inline void LCLoginAccount::set_client_sessionid(::google::protobuf::int64 value) {
  
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.client_sessionid)
}

// string login_key = 5;
inline void LCLoginAccount::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginAccount::login_key() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.login_key)
  return login_key_.GetNoArena();
}
inline void LCLoginAccount::set_login_key(const ::std::string& value) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.login_key)
}
#if LANG_CXX11
inline void LCLoginAccount::set_login_key(::std::string&& value) {
  
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginAccount.login_key)
}
#endif
inline void LCLoginAccount::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginAccount.login_key)
}
inline void LCLoginAccount::set_login_key(const char* value, size_t size) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginAccount.login_key)
}
inline ::std::string* LCLoginAccount::mutable_login_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginAccount.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginAccount::release_login_key() {
  // @@protoc_insertion_point(field_release:protos.LCLoginAccount.login_key)
  
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginAccount::set_allocated_login_key(::std::string* login_key) {
  if (login_key != nullptr) {
    
  } else {
    
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginAccount.login_key)
}

// string user_token = 6;
inline void LCLoginAccount::clear_user_token() {
  user_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginAccount::user_token() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginAccount.user_token)
  return user_token_.GetNoArena();
}
inline void LCLoginAccount::set_user_token(const ::std::string& value) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginAccount.user_token)
}
#if LANG_CXX11
inline void LCLoginAccount::set_user_token(::std::string&& value) {
  
  user_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginAccount.user_token)
}
#endif
inline void LCLoginAccount::set_user_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginAccount.user_token)
}
inline void LCLoginAccount::set_user_token(const char* value, size_t size) {
  
  user_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginAccount.user_token)
}
inline ::std::string* LCLoginAccount::mutable_user_token() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginAccount.user_token)
  return user_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginAccount::release_user_token() {
  // @@protoc_insertion_point(field_release:protos.LCLoginAccount.user_token)
  
  return user_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginAccount::set_allocated_user_token(::std::string* user_token) {
  if (user_token != nullptr) {
    
  } else {
    
  }
  user_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_token);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginAccount.user_token)
}

// -------------------------------------------------------------------

// CLServerList

// -------------------------------------------------------------------

// LCServerList_PlayerInfo

// int64 guid = 1;
inline void LCServerList_PlayerInfo::clear_guid() {
  guid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCServerList_PlayerInfo::guid() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.PlayerInfo.guid)
  return guid_;
}
inline void LCServerList_PlayerInfo::set_guid(::google::protobuf::int64 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.PlayerInfo.guid)
}

// string name = 2;
inline void LCServerList_PlayerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCServerList_PlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.PlayerInfo.name)
  return name_.GetNoArena();
}
inline void LCServerList_PlayerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCServerList.PlayerInfo.name)
}
#if LANG_CXX11
inline void LCServerList_PlayerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCServerList.PlayerInfo.name)
}
#endif
inline void LCServerList_PlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCServerList.PlayerInfo.name)
}
inline void LCServerList_PlayerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCServerList.PlayerInfo.name)
}
inline ::std::string* LCServerList_PlayerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.PlayerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCServerList_PlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:protos.LCServerList.PlayerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCServerList_PlayerInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.LCServerList.PlayerInfo.name)
}

// int32 portraitid = 3;
inline void LCServerList_PlayerInfo::clear_portraitid() {
  portraitid_ = 0;
}
inline ::google::protobuf::int32 LCServerList_PlayerInfo::portraitid() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.PlayerInfo.portraitid)
  return portraitid_;
}
inline void LCServerList_PlayerInfo::set_portraitid(::google::protobuf::int32 value) {
  
  portraitid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.PlayerInfo.portraitid)
}

// int32 level = 4;
inline void LCServerList_PlayerInfo::clear_level() {
  level_ = 0;
}
inline ::google::protobuf::int32 LCServerList_PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.PlayerInfo.level)
  return level_;
}
inline void LCServerList_PlayerInfo::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.PlayerInfo.level)
}

// -------------------------------------------------------------------

// LCServerList_ServerInfo

// int32 id = 1;
inline void LCServerList_ServerInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 LCServerList_ServerInfo::id() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.ServerInfo.id)
  return id_;
}
inline void LCServerList_ServerInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.ServerInfo.id)
}

// string name = 2;
inline void LCServerList_ServerInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCServerList_ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.ServerInfo.name)
  return name_.GetNoArena();
}
inline void LCServerList_ServerInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCServerList.ServerInfo.name)
}
#if LANG_CXX11
inline void LCServerList_ServerInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCServerList.ServerInfo.name)
}
#endif
inline void LCServerList_ServerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCServerList.ServerInfo.name)
}
inline void LCServerList_ServerInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCServerList.ServerInfo.name)
}
inline ::std::string* LCServerList_ServerInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.ServerInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCServerList_ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:protos.LCServerList.ServerInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCServerList_ServerInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protos.LCServerList.ServerInfo.name)
}

// .protos.LCServerList.ServerState state = 3;
inline void LCServerList_ServerInfo::clear_state() {
  state_ = 0;
}
inline ::protos::LCServerList_ServerState LCServerList_ServerInfo::state() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.ServerInfo.state)
  return static_cast< ::protos::LCServerList_ServerState >(state_);
}
inline void LCServerList_ServerInfo::set_state(::protos::LCServerList_ServerState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.ServerInfo.state)
}

// string addr = 4;
inline void LCServerList_ServerInfo::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCServerList_ServerInfo::addr() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.ServerInfo.addr)
  return addr_.GetNoArena();
}
inline void LCServerList_ServerInfo::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCServerList.ServerInfo.addr)
}
#if LANG_CXX11
inline void LCServerList_ServerInfo::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCServerList.ServerInfo.addr)
}
#endif
inline void LCServerList_ServerInfo::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCServerList.ServerInfo.addr)
}
inline void LCServerList_ServerInfo::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCServerList.ServerInfo.addr)
}
inline ::std::string* LCServerList_ServerInfo::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.ServerInfo.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCServerList_ServerInfo::release_addr() {
  // @@protoc_insertion_point(field_release:protos.LCServerList.ServerInfo.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCServerList_ServerInfo::set_allocated_addr(::std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:protos.LCServerList.ServerInfo.addr)
}

// .protos.LCServerList.PlayerInfo player_info = 5;
inline bool LCServerList_ServerInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline void LCServerList_ServerInfo::clear_player_info() {
  if (GetArenaNoVirtual() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
inline const ::protos::LCServerList_PlayerInfo& LCServerList_ServerInfo::player_info() const {
  const ::protos::LCServerList_PlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:protos.LCServerList.ServerInfo.player_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LCServerList_PlayerInfo*>(
      &::protos::_LCServerList_PlayerInfo_default_instance_);
}
inline ::protos::LCServerList_PlayerInfo* LCServerList_ServerInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:protos.LCServerList.ServerInfo.player_info)
  
  ::protos::LCServerList_PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::protos::LCServerList_PlayerInfo* LCServerList_ServerInfo::mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LCServerList_PlayerInfo>(GetArenaNoVirtual());
    player_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.ServerInfo.player_info)
  return player_info_;
}
inline void LCServerList_ServerInfo::set_allocated_player_info(::protos::LCServerList_PlayerInfo* player_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:protos.LCServerList.ServerInfo.player_info)
}

// -------------------------------------------------------------------

// LCServerList

// int32 error = 1;
inline void LCServerList::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCServerList::error() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.error)
  return error_;
}
inline void LCServerList::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCServerList.error)
}

// string errmsg = 2;
inline void LCServerList::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCServerList::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCServerList::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCServerList.errmsg)
}
#if LANG_CXX11
inline void LCServerList::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCServerList.errmsg)
}
#endif
inline void LCServerList::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCServerList.errmsg)
}
inline void LCServerList::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCServerList.errmsg)
}
inline ::std::string* LCServerList::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCServerList::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCServerList.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCServerList::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCServerList.errmsg)
}

// repeated .protos.LCServerList.ServerInfo server_list = 3;
inline int LCServerList::server_list_size() const {
  return server_list_.size();
}
inline void LCServerList::clear_server_list() {
  server_list_.Clear();
}
inline ::protos::LCServerList_ServerInfo* LCServerList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:protos.LCServerList.server_list)
  return server_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protos::LCServerList_ServerInfo >*
LCServerList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:protos.LCServerList.server_list)
  return &server_list_;
}
inline const ::protos::LCServerList_ServerInfo& LCServerList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:protos.LCServerList.server_list)
  return server_list_.Get(index);
}
inline ::protos::LCServerList_ServerInfo* LCServerList::add_server_list() {
  // @@protoc_insertion_point(field_add:protos.LCServerList.server_list)
  return server_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protos::LCServerList_ServerInfo >&
LCServerList::server_list() const {
  // @@protoc_insertion_point(field_list:protos.LCServerList.server_list)
  return server_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protos::LCServerList_ServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::LCServerList_ServerState>() {
  return ::protos::LCServerList_ServerState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_login_2eproto
