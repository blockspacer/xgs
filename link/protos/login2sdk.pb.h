// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login2sdk.proto

#ifndef PROTOBUF_INCLUDED_login2sdk_2eproto
#define PROTOBUF_INCLUDED_login2sdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login2sdk_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_login2sdk_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_login2sdk_2eproto();
namespace protos {
class CLLoginFacebook;
class CLLoginFacebookDefaultTypeInternal;
extern CLLoginFacebookDefaultTypeInternal _CLLoginFacebook_default_instance_;
class CLLoginWeixin;
class CLLoginWeixinDefaultTypeInternal;
extern CLLoginWeixinDefaultTypeInternal _CLLoginWeixin_default_instance_;
class CLReconnLogin;
class CLReconnLoginDefaultTypeInternal;
extern CLReconnLoginDefaultTypeInternal _CLReconnLogin_default_instance_;
class L2LinkDisconnect;
class L2LinkDisconnectDefaultTypeInternal;
extern L2LinkDisconnectDefaultTypeInternal _L2LinkDisconnect_default_instance_;
class L2LinkKickPlayer;
class L2LinkKickPlayerDefaultTypeInternal;
extern L2LinkKickPlayerDefaultTypeInternal _L2LinkKickPlayer_default_instance_;
class L2SDKLoginWeixin;
class L2SDKLoginWeixinDefaultTypeInternal;
extern L2SDKLoginWeixinDefaultTypeInternal _L2SDKLoginWeixin_default_instance_;
class LCLoginFacebook;
class LCLoginFacebookDefaultTypeInternal;
extern LCLoginFacebookDefaultTypeInternal _LCLoginFacebook_default_instance_;
class LCLoginWeixin;
class LCLoginWeixinDefaultTypeInternal;
extern LCLoginWeixinDefaultTypeInternal _LCLoginWeixin_default_instance_;
class LCReconnLogin;
class LCReconnLoginDefaultTypeInternal;
extern LCReconnLoginDefaultTypeInternal _LCReconnLogin_default_instance_;
class Link2LDisconnect;
class Link2LDisconnectDefaultTypeInternal;
extern Link2LDisconnectDefaultTypeInternal _Link2LDisconnect_default_instance_;
class LoginFacebook;
class LoginFacebookDefaultTypeInternal;
extern LoginFacebookDefaultTypeInternal _LoginFacebook_default_instance_;
class LoginRoute;
class LoginRouteDefaultTypeInternal;
extern LoginRouteDefaultTypeInternal _LoginRoute_default_instance_;
class LoginWeixin;
class LoginWeixinDefaultTypeInternal;
extern LoginWeixinDefaultTypeInternal _LoginWeixin_default_instance_;
class SDK2LLoginWeixin;
class SDK2LLoginWeixinDefaultTypeInternal;
extern SDK2LLoginWeixinDefaultTypeInternal _SDK2LLoginWeixin_default_instance_;
}  // namespace protos
namespace google {
namespace protobuf {
template<> ::protos::CLLoginFacebook* Arena::CreateMaybeMessage<::protos::CLLoginFacebook>(Arena*);
template<> ::protos::CLLoginWeixin* Arena::CreateMaybeMessage<::protos::CLLoginWeixin>(Arena*);
template<> ::protos::CLReconnLogin* Arena::CreateMaybeMessage<::protos::CLReconnLogin>(Arena*);
template<> ::protos::L2LinkDisconnect* Arena::CreateMaybeMessage<::protos::L2LinkDisconnect>(Arena*);
template<> ::protos::L2LinkKickPlayer* Arena::CreateMaybeMessage<::protos::L2LinkKickPlayer>(Arena*);
template<> ::protos::L2SDKLoginWeixin* Arena::CreateMaybeMessage<::protos::L2SDKLoginWeixin>(Arena*);
template<> ::protos::LCLoginFacebook* Arena::CreateMaybeMessage<::protos::LCLoginFacebook>(Arena*);
template<> ::protos::LCLoginWeixin* Arena::CreateMaybeMessage<::protos::LCLoginWeixin>(Arena*);
template<> ::protos::LCReconnLogin* Arena::CreateMaybeMessage<::protos::LCReconnLogin>(Arena*);
template<> ::protos::Link2LDisconnect* Arena::CreateMaybeMessage<::protos::Link2LDisconnect>(Arena*);
template<> ::protos::LoginFacebook* Arena::CreateMaybeMessage<::protos::LoginFacebook>(Arena*);
template<> ::protos::LoginRoute* Arena::CreateMaybeMessage<::protos::LoginRoute>(Arena*);
template<> ::protos::LoginWeixin* Arena::CreateMaybeMessage<::protos::LoginWeixin>(Arena*);
template<> ::protos::SDK2LLoginWeixin* Arena::CreateMaybeMessage<::protos::SDK2LLoginWeixin>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protos {

// ===================================================================

class LoginWeixin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LoginWeixin) */ {
 public:
  LoginWeixin();
  virtual ~LoginWeixin();

  LoginWeixin(const LoginWeixin& from);

  inline LoginWeixin& operator=(const LoginWeixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginWeixin(LoginWeixin&& from) noexcept
    : LoginWeixin() {
    *this = ::std::move(from);
  }

  inline LoginWeixin& operator=(LoginWeixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginWeixin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginWeixin* internal_default_instance() {
    return reinterpret_cast<const LoginWeixin*>(
               &_LoginWeixin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LoginWeixin* other);
  friend void swap(LoginWeixin& a, LoginWeixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginWeixin* New() const final {
    return CreateMaybeMessage<LoginWeixin>(nullptr);
  }

  LoginWeixin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginWeixin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginWeixin& from);
  void MergeFrom(const LoginWeixin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginWeixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceid = 1;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string js_code = 3;
  void clear_js_code();
  static const int kJsCodeFieldNumber = 3;
  const ::std::string& js_code() const;
  void set_js_code(const ::std::string& value);
  #if LANG_CXX11
  void set_js_code(::std::string&& value);
  #endif
  void set_js_code(const char* value);
  void set_js_code(const char* value, size_t size);
  ::std::string* mutable_js_code();
  ::std::string* release_js_code();
  void set_allocated_js_code(::std::string* js_code);

  // @@protoc_insertion_point(class_scope:protos.LoginWeixin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr js_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class LoginRoute :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LoginRoute) */ {
 public:
  LoginRoute();
  virtual ~LoginRoute();

  LoginRoute(const LoginRoute& from);

  inline LoginRoute& operator=(const LoginRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRoute(LoginRoute&& from) noexcept
    : LoginRoute() {
    *this = ::std::move(from);
  }

  inline LoginRoute& operator=(LoginRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRoute* internal_default_instance() {
    return reinterpret_cast<const LoginRoute*>(
               &_LoginRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(LoginRoute* other);
  friend void swap(LoginRoute& a, LoginRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRoute* New() const final {
    return CreateMaybeMessage<LoginRoute>(nullptr);
  }

  LoginRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRoute& from);
  void MergeFrom(const LoginRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 client_sessionid = 1;
  void clear_client_sessionid();
  static const int kClientSessionidFieldNumber = 1;
  ::google::protobuf::int64 client_sessionid() const;
  void set_client_sessionid(::google::protobuf::int64 value);

  // int32 link_id = 2;
  void clear_link_id();
  static const int kLinkIdFieldNumber = 2;
  ::google::protobuf::int32 link_id() const;
  void set_link_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LoginRoute)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 client_sessionid_;
  ::google::protobuf::int32 link_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class CLLoginWeixin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLLoginWeixin) */ {
 public:
  CLLoginWeixin();
  virtual ~CLLoginWeixin();

  CLLoginWeixin(const CLLoginWeixin& from);

  inline CLLoginWeixin& operator=(const CLLoginWeixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLLoginWeixin(CLLoginWeixin&& from) noexcept
    : CLLoginWeixin() {
    *this = ::std::move(from);
  }

  inline CLLoginWeixin& operator=(CLLoginWeixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLLoginWeixin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLLoginWeixin* internal_default_instance() {
    return reinterpret_cast<const CLLoginWeixin*>(
               &_CLLoginWeixin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CLLoginWeixin* other);
  friend void swap(CLLoginWeixin& a, CLLoginWeixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLLoginWeixin* New() const final {
    return CreateMaybeMessage<CLLoginWeixin>(nullptr);
  }

  CLLoginWeixin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLLoginWeixin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLLoginWeixin& from);
  void MergeFrom(const CLLoginWeixin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLLoginWeixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protos.LoginRoute route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // .protos.LoginWeixin param = 2;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 2;
  const ::protos::LoginWeixin& param() const;
  ::protos::LoginWeixin* release_param();
  ::protos::LoginWeixin* mutable_param();
  void set_allocated_param(::protos::LoginWeixin* param);

  // @@protoc_insertion_point(class_scope:protos.CLLoginWeixin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protos::LoginRoute* route_;
  ::protos::LoginWeixin* param_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class LCLoginWeixin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCLoginWeixin) */ {
 public:
  LCLoginWeixin();
  virtual ~LCLoginWeixin();

  LCLoginWeixin(const LCLoginWeixin& from);

  inline LCLoginWeixin& operator=(const LCLoginWeixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCLoginWeixin(LCLoginWeixin&& from) noexcept
    : LCLoginWeixin() {
    *this = ::std::move(from);
  }

  inline LCLoginWeixin& operator=(LCLoginWeixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCLoginWeixin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCLoginWeixin* internal_default_instance() {
    return reinterpret_cast<const LCLoginWeixin*>(
               &_LCLoginWeixin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(LCLoginWeixin* other);
  friend void swap(LCLoginWeixin& a, LCLoginWeixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCLoginWeixin* New() const final {
    return CreateMaybeMessage<LCLoginWeixin>(nullptr);
  }

  LCLoginWeixin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCLoginWeixin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCLoginWeixin& from);
  void MergeFrom(const LCLoginWeixin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCLoginWeixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_key = 5;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 5;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // string wx_openid = 6;
  void clear_wx_openid();
  static const int kWxOpenidFieldNumber = 6;
  const ::std::string& wx_openid() const;
  void set_wx_openid(const ::std::string& value);
  #if LANG_CXX11
  void set_wx_openid(::std::string&& value);
  #endif
  void set_wx_openid(const char* value);
  void set_wx_openid(const char* value, size_t size);
  ::std::string* mutable_wx_openid();
  ::std::string* release_wx_openid();
  void set_allocated_wx_openid(::std::string* wx_openid);

  // string wx_errmsg = 8;
  void clear_wx_errmsg();
  static const int kWxErrmsgFieldNumber = 8;
  const ::std::string& wx_errmsg() const;
  void set_wx_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_wx_errmsg(::std::string&& value);
  #endif
  void set_wx_errmsg(const char* value);
  void set_wx_errmsg(const char* value, size_t size);
  ::std::string* mutable_wx_errmsg();
  ::std::string* release_wx_errmsg();
  void set_allocated_wx_errmsg(::std::string* wx_errmsg);

  // .protos.LoginRoute route = 4;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 4;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 wx_errcode = 7;
  void clear_wx_errcode();
  static const int kWxErrcodeFieldNumber = 7;
  ::google::protobuf::int32 wx_errcode() const;
  void set_wx_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCLoginWeixin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::google::protobuf::internal::ArenaStringPtr wx_openid_;
  ::google::protobuf::internal::ArenaStringPtr wx_errmsg_;
  ::protos::LoginRoute* route_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 wx_errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class L2SDKLoginWeixin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.L2SDKLoginWeixin) */ {
 public:
  L2SDKLoginWeixin();
  virtual ~L2SDKLoginWeixin();

  L2SDKLoginWeixin(const L2SDKLoginWeixin& from);

  inline L2SDKLoginWeixin& operator=(const L2SDKLoginWeixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  L2SDKLoginWeixin(L2SDKLoginWeixin&& from) noexcept
    : L2SDKLoginWeixin() {
    *this = ::std::move(from);
  }

  inline L2SDKLoginWeixin& operator=(L2SDKLoginWeixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const L2SDKLoginWeixin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L2SDKLoginWeixin* internal_default_instance() {
    return reinterpret_cast<const L2SDKLoginWeixin*>(
               &_L2SDKLoginWeixin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(L2SDKLoginWeixin* other);
  friend void swap(L2SDKLoginWeixin& a, L2SDKLoginWeixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline L2SDKLoginWeixin* New() const final {
    return CreateMaybeMessage<L2SDKLoginWeixin>(nullptr);
  }

  L2SDKLoginWeixin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<L2SDKLoginWeixin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const L2SDKLoginWeixin& from);
  void MergeFrom(const L2SDKLoginWeixin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2SDKLoginWeixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protos.LoginRoute route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // .protos.LoginWeixin param = 3;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 3;
  const ::protos::LoginWeixin& param() const;
  ::protos::LoginWeixin* release_param();
  ::protos::LoginWeixin* mutable_param();
  void set_allocated_param(::protos::LoginWeixin* param);

  // int64 link_sessionid = 2;
  void clear_link_sessionid();
  static const int kLinkSessionidFieldNumber = 2;
  ::google::protobuf::int64 link_sessionid() const;
  void set_link_sessionid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protos.L2SDKLoginWeixin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protos::LoginRoute* route_;
  ::protos::LoginWeixin* param_;
  ::google::protobuf::int64 link_sessionid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class SDK2LLoginWeixin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.SDK2LLoginWeixin) */ {
 public:
  SDK2LLoginWeixin();
  virtual ~SDK2LLoginWeixin();

  SDK2LLoginWeixin(const SDK2LLoginWeixin& from);

  inline SDK2LLoginWeixin& operator=(const SDK2LLoginWeixin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SDK2LLoginWeixin(SDK2LLoginWeixin&& from) noexcept
    : SDK2LLoginWeixin() {
    *this = ::std::move(from);
  }

  inline SDK2LLoginWeixin& operator=(SDK2LLoginWeixin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SDK2LLoginWeixin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SDK2LLoginWeixin* internal_default_instance() {
    return reinterpret_cast<const SDK2LLoginWeixin*>(
               &_SDK2LLoginWeixin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(SDK2LLoginWeixin* other);
  friend void swap(SDK2LLoginWeixin& a, SDK2LLoginWeixin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SDK2LLoginWeixin* New() const final {
    return CreateMaybeMessage<SDK2LLoginWeixin>(nullptr);
  }

  SDK2LLoginWeixin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SDK2LLoginWeixin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SDK2LLoginWeixin& from);
  void MergeFrom(const SDK2LLoginWeixin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SDK2LLoginWeixin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string wx_openid = 6;
  void clear_wx_openid();
  static const int kWxOpenidFieldNumber = 6;
  const ::std::string& wx_openid() const;
  void set_wx_openid(const ::std::string& value);
  #if LANG_CXX11
  void set_wx_openid(::std::string&& value);
  #endif
  void set_wx_openid(const char* value);
  void set_wx_openid(const char* value, size_t size);
  ::std::string* mutable_wx_openid();
  ::std::string* release_wx_openid();
  void set_allocated_wx_openid(::std::string* wx_openid);

  // string wx_session_key = 7;
  void clear_wx_session_key();
  static const int kWxSessionKeyFieldNumber = 7;
  const ::std::string& wx_session_key() const;
  void set_wx_session_key(const ::std::string& value);
  #if LANG_CXX11
  void set_wx_session_key(::std::string&& value);
  #endif
  void set_wx_session_key(const char* value);
  void set_wx_session_key(const char* value, size_t size);
  ::std::string* mutable_wx_session_key();
  ::std::string* release_wx_session_key();
  void set_allocated_wx_session_key(::std::string* wx_session_key);

  // string wx_errmsg = 9;
  void clear_wx_errmsg();
  static const int kWxErrmsgFieldNumber = 9;
  const ::std::string& wx_errmsg() const;
  void set_wx_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_wx_errmsg(::std::string&& value);
  #endif
  void set_wx_errmsg(const char* value);
  void set_wx_errmsg(const char* value, size_t size);
  ::std::string* mutable_wx_errmsg();
  ::std::string* release_wx_errmsg();
  void set_allocated_wx_errmsg(::std::string* wx_errmsg);

  // .protos.LoginRoute route = 3;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 3;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // .protos.LoginWeixin param = 5;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 5;
  const ::protos::LoginWeixin& param() const;
  ::protos::LoginWeixin* release_param();
  ::protos::LoginWeixin* mutable_param();
  void set_allocated_param(::protos::LoginWeixin* param);

  // int64 link_sessionid = 4;
  void clear_link_sessionid();
  static const int kLinkSessionidFieldNumber = 4;
  ::google::protobuf::int64 link_sessionid() const;
  void set_link_sessionid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // int32 wx_errcode = 8;
  void clear_wx_errcode();
  static const int kWxErrcodeFieldNumber = 8;
  ::google::protobuf::int32 wx_errcode() const;
  void set_wx_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.SDK2LLoginWeixin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr wx_openid_;
  ::google::protobuf::internal::ArenaStringPtr wx_session_key_;
  ::google::protobuf::internal::ArenaStringPtr wx_errmsg_;
  ::protos::LoginRoute* route_;
  ::protos::LoginWeixin* param_;
  ::google::protobuf::int64 link_sessionid_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 wx_errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class LoginFacebook :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LoginFacebook) */ {
 public:
  LoginFacebook();
  virtual ~LoginFacebook();

  LoginFacebook(const LoginFacebook& from);

  inline LoginFacebook& operator=(const LoginFacebook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginFacebook(LoginFacebook&& from) noexcept
    : LoginFacebook() {
    *this = ::std::move(from);
  }

  inline LoginFacebook& operator=(LoginFacebook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LoginFacebook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginFacebook* internal_default_instance() {
    return reinterpret_cast<const LoginFacebook*>(
               &_LoginFacebook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(LoginFacebook* other);
  friend void swap(LoginFacebook& a, LoginFacebook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginFacebook* New() const final {
    return CreateMaybeMessage<LoginFacebook>(nullptr);
  }

  LoginFacebook* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginFacebook>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginFacebook& from);
  void MergeFrom(const LoginFacebook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginFacebook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string deviceid = 1;
  void clear_deviceid();
  static const int kDeviceidFieldNumber = 1;
  const ::std::string& deviceid() const;
  void set_deviceid(const ::std::string& value);
  #if LANG_CXX11
  void set_deviceid(::std::string&& value);
  #endif
  void set_deviceid(const char* value);
  void set_deviceid(const char* value, size_t size);
  ::std::string* mutable_deviceid();
  ::std::string* release_deviceid();
  void set_allocated_deviceid(::std::string* deviceid);

  // string ip = 2;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string code = 3;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:protos.LoginFacebook)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr deviceid_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class CLLoginFacebook :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLLoginFacebook) */ {
 public:
  CLLoginFacebook();
  virtual ~CLLoginFacebook();

  CLLoginFacebook(const CLLoginFacebook& from);

  inline CLLoginFacebook& operator=(const CLLoginFacebook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLLoginFacebook(CLLoginFacebook&& from) noexcept
    : CLLoginFacebook() {
    *this = ::std::move(from);
  }

  inline CLLoginFacebook& operator=(CLLoginFacebook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLLoginFacebook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLLoginFacebook* internal_default_instance() {
    return reinterpret_cast<const CLLoginFacebook*>(
               &_CLLoginFacebook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CLLoginFacebook* other);
  friend void swap(CLLoginFacebook& a, CLLoginFacebook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLLoginFacebook* New() const final {
    return CreateMaybeMessage<CLLoginFacebook>(nullptr);
  }

  CLLoginFacebook* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLLoginFacebook>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLLoginFacebook& from);
  void MergeFrom(const CLLoginFacebook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLLoginFacebook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .protos.LoginRoute route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // .protos.LoginFacebook param = 2;
  bool has_param() const;
  void clear_param();
  static const int kParamFieldNumber = 2;
  const ::protos::LoginFacebook& param() const;
  ::protos::LoginFacebook* release_param();
  ::protos::LoginFacebook* mutable_param();
  void set_allocated_param(::protos::LoginFacebook* param);

  // @@protoc_insertion_point(class_scope:protos.CLLoginFacebook)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::protos::LoginRoute* route_;
  ::protos::LoginFacebook* param_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class LCLoginFacebook :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCLoginFacebook) */ {
 public:
  LCLoginFacebook();
  virtual ~LCLoginFacebook();

  LCLoginFacebook(const LCLoginFacebook& from);

  inline LCLoginFacebook& operator=(const LCLoginFacebook& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCLoginFacebook(LCLoginFacebook&& from) noexcept
    : LCLoginFacebook() {
    *this = ::std::move(from);
  }

  inline LCLoginFacebook& operator=(LCLoginFacebook&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCLoginFacebook& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCLoginFacebook* internal_default_instance() {
    return reinterpret_cast<const LCLoginFacebook*>(
               &_LCLoginFacebook_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(LCLoginFacebook* other);
  friend void swap(LCLoginFacebook& a, LCLoginFacebook& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCLoginFacebook* New() const final {
    return CreateMaybeMessage<LCLoginFacebook>(nullptr);
  }

  LCLoginFacebook* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCLoginFacebook>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCLoginFacebook& from);
  void MergeFrom(const LCLoginFacebook& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCLoginFacebook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // string login_key = 5;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 5;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // .protos.LoginRoute route = 4;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 4;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCLoginFacebook)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::protos::LoginRoute* route_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class CLReconnLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.CLReconnLogin) */ {
 public:
  CLReconnLogin();
  virtual ~CLReconnLogin();

  CLReconnLogin(const CLReconnLogin& from);

  inline CLReconnLogin& operator=(const CLReconnLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CLReconnLogin(CLReconnLogin&& from) noexcept
    : CLReconnLogin() {
    *this = ::std::move(from);
  }

  inline CLReconnLogin& operator=(CLReconnLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CLReconnLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CLReconnLogin* internal_default_instance() {
    return reinterpret_cast<const CLReconnLogin*>(
               &_CLReconnLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(CLReconnLogin* other);
  friend void swap(CLReconnLogin& a, CLReconnLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CLReconnLogin* New() const final {
    return CreateMaybeMessage<CLReconnLogin>(nullptr);
  }

  CLReconnLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CLReconnLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CLReconnLogin& from);
  void MergeFrom(const CLReconnLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLReconnLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string login_key = 2;
  void clear_login_key();
  static const int kLoginKeyFieldNumber = 2;
  const ::std::string& login_key() const;
  void set_login_key(const ::std::string& value);
  #if LANG_CXX11
  void set_login_key(::std::string&& value);
  #endif
  void set_login_key(const char* value);
  void set_login_key(const char* value, size_t size);
  ::std::string* mutable_login_key();
  ::std::string* release_login_key();
  void set_allocated_login_key(::std::string* login_key);

  // .protos.LoginRoute route = 1;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 1;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // @@protoc_insertion_point(class_scope:protos.CLReconnLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr login_key_;
  ::protos::LoginRoute* route_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class LCReconnLogin :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.LCReconnLogin) */ {
 public:
  LCReconnLogin();
  virtual ~LCReconnLogin();

  LCReconnLogin(const LCReconnLogin& from);

  inline LCReconnLogin& operator=(const LCReconnLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LCReconnLogin(LCReconnLogin&& from) noexcept
    : LCReconnLogin() {
    *this = ::std::move(from);
  }

  inline LCReconnLogin& operator=(LCReconnLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LCReconnLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LCReconnLogin* internal_default_instance() {
    return reinterpret_cast<const LCReconnLogin*>(
               &_LCReconnLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LCReconnLogin* other);
  friend void swap(LCReconnLogin& a, LCReconnLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LCReconnLogin* New() const final {
    return CreateMaybeMessage<LCReconnLogin>(nullptr);
  }

  LCReconnLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LCReconnLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LCReconnLogin& from);
  void MergeFrom(const LCReconnLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LCReconnLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .protos.LoginRoute route = 4;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 4;
  const ::protos::LoginRoute& route() const;
  ::protos::LoginRoute* release_route();
  ::protos::LoginRoute* mutable_route();
  void set_allocated_route(::protos::LoginRoute* route);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.LCReconnLogin)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::protos::LoginRoute* route_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class Link2LDisconnect :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.Link2LDisconnect) */ {
 public:
  Link2LDisconnect();
  virtual ~Link2LDisconnect();

  Link2LDisconnect(const Link2LDisconnect& from);

  inline Link2LDisconnect& operator=(const Link2LDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Link2LDisconnect(Link2LDisconnect&& from) noexcept
    : Link2LDisconnect() {
    *this = ::std::move(from);
  }

  inline Link2LDisconnect& operator=(Link2LDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Link2LDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Link2LDisconnect* internal_default_instance() {
    return reinterpret_cast<const Link2LDisconnect*>(
               &_Link2LDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Link2LDisconnect* other);
  friend void swap(Link2LDisconnect& a, Link2LDisconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Link2LDisconnect* New() const final {
    return CreateMaybeMessage<Link2LDisconnect>(nullptr);
  }

  Link2LDisconnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Link2LDisconnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Link2LDisconnect& from);
  void MergeFrom(const Link2LDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Link2LDisconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 userid = 1;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:protos.Link2LDisconnect)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 userid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class L2LinkDisconnect :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.L2LinkDisconnect) */ {
 public:
  L2LinkDisconnect();
  virtual ~L2LinkDisconnect();

  L2LinkDisconnect(const L2LinkDisconnect& from);

  inline L2LinkDisconnect& operator=(const L2LinkDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  L2LinkDisconnect(L2LinkDisconnect&& from) noexcept
    : L2LinkDisconnect() {
    *this = ::std::move(from);
  }

  inline L2LinkDisconnect& operator=(L2LinkDisconnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const L2LinkDisconnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L2LinkDisconnect* internal_default_instance() {
    return reinterpret_cast<const L2LinkDisconnect*>(
               &_L2LinkDisconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(L2LinkDisconnect* other);
  friend void swap(L2LinkDisconnect& a, L2LinkDisconnect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline L2LinkDisconnect* New() const final {
    return CreateMaybeMessage<L2LinkDisconnect>(nullptr);
  }

  L2LinkDisconnect* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<L2LinkDisconnect>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const L2LinkDisconnect& from);
  void MergeFrom(const L2LinkDisconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2LinkDisconnect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.L2LinkDisconnect)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// -------------------------------------------------------------------

class L2LinkKickPlayer :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protos.L2LinkKickPlayer) */ {
 public:
  L2LinkKickPlayer();
  virtual ~L2LinkKickPlayer();

  L2LinkKickPlayer(const L2LinkKickPlayer& from);

  inline L2LinkKickPlayer& operator=(const L2LinkKickPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  L2LinkKickPlayer(L2LinkKickPlayer&& from) noexcept
    : L2LinkKickPlayer() {
    *this = ::std::move(from);
  }

  inline L2LinkKickPlayer& operator=(L2LinkKickPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const L2LinkKickPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const L2LinkKickPlayer* internal_default_instance() {
    return reinterpret_cast<const L2LinkKickPlayer*>(
               &_L2LinkKickPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(L2LinkKickPlayer* other);
  friend void swap(L2LinkKickPlayer& a, L2LinkKickPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline L2LinkKickPlayer* New() const final {
    return CreateMaybeMessage<L2LinkKickPlayer>(nullptr);
  }

  L2LinkKickPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<L2LinkKickPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const L2LinkKickPlayer& from);
  void MergeFrom(const L2LinkKickPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2LinkKickPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int64 userid = 3;
  void clear_userid();
  static const int kUseridFieldNumber = 3;
  ::google::protobuf::int64 userid() const;
  void set_userid(::google::protobuf::int64 value);

  // int32 error = 1;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  ::google::protobuf::int32 error() const;
  void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protos.L2LinkKickPlayer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int64 userid_;
  ::google::protobuf::int32 error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login2sdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginWeixin

// string deviceid = 1;
inline void LoginWeixin::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginWeixin::deviceid() const {
  // @@protoc_insertion_point(field_get:protos.LoginWeixin.deviceid)
  return deviceid_.GetNoArena();
}
inline void LoginWeixin::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginWeixin.deviceid)
}
#if LANG_CXX11
inline void LoginWeixin::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginWeixin.deviceid)
}
#endif
inline void LoginWeixin::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginWeixin.deviceid)
}
inline void LoginWeixin::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginWeixin.deviceid)
}
inline ::std::string* LoginWeixin::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginWeixin.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginWeixin::release_deviceid() {
  // @@protoc_insertion_point(field_release:protos.LoginWeixin.deviceid)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginWeixin::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginWeixin.deviceid)
}

// string ip = 2;
inline void LoginWeixin::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginWeixin::ip() const {
  // @@protoc_insertion_point(field_get:protos.LoginWeixin.ip)
  return ip_.GetNoArena();
}
inline void LoginWeixin::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginWeixin.ip)
}
#if LANG_CXX11
inline void LoginWeixin::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginWeixin.ip)
}
#endif
inline void LoginWeixin::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginWeixin.ip)
}
inline void LoginWeixin::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginWeixin.ip)
}
inline ::std::string* LoginWeixin::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginWeixin.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginWeixin::release_ip() {
  // @@protoc_insertion_point(field_release:protos.LoginWeixin.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginWeixin::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginWeixin.ip)
}

// string js_code = 3;
inline void LoginWeixin::clear_js_code() {
  js_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginWeixin::js_code() const {
  // @@protoc_insertion_point(field_get:protos.LoginWeixin.js_code)
  return js_code_.GetNoArena();
}
inline void LoginWeixin::set_js_code(const ::std::string& value) {
  
  js_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginWeixin.js_code)
}
#if LANG_CXX11
inline void LoginWeixin::set_js_code(::std::string&& value) {
  
  js_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginWeixin.js_code)
}
#endif
inline void LoginWeixin::set_js_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  js_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginWeixin.js_code)
}
inline void LoginWeixin::set_js_code(const char* value, size_t size) {
  
  js_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginWeixin.js_code)
}
inline ::std::string* LoginWeixin::mutable_js_code() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginWeixin.js_code)
  return js_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginWeixin::release_js_code() {
  // @@protoc_insertion_point(field_release:protos.LoginWeixin.js_code)
  
  return js_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginWeixin::set_allocated_js_code(::std::string* js_code) {
  if (js_code != nullptr) {
    
  } else {
    
  }
  js_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), js_code);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginWeixin.js_code)
}

// -------------------------------------------------------------------

// LoginRoute

// int64 client_sessionid = 1;
inline void LoginRoute::clear_client_sessionid() {
  client_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LoginRoute::client_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.LoginRoute.client_sessionid)
  return client_sessionid_;
}
inline void LoginRoute::set_client_sessionid(::google::protobuf::int64 value) {
  
  client_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.LoginRoute.client_sessionid)
}

// int32 link_id = 2;
inline void LoginRoute::clear_link_id() {
  link_id_ = 0;
}
inline ::google::protobuf::int32 LoginRoute::link_id() const {
  // @@protoc_insertion_point(field_get:protos.LoginRoute.link_id)
  return link_id_;
}
inline void LoginRoute::set_link_id(::google::protobuf::int32 value) {
  
  link_id_ = value;
  // @@protoc_insertion_point(field_set:protos.LoginRoute.link_id)
}

// -------------------------------------------------------------------

// CLLoginWeixin

// .protos.LoginRoute route = 1;
inline bool CLLoginWeixin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void CLLoginWeixin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& CLLoginWeixin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.CLLoginWeixin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* CLLoginWeixin::release_route() {
  // @@protoc_insertion_point(field_release:protos.CLLoginWeixin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* CLLoginWeixin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.CLLoginWeixin.route)
  return route_;
}
inline void CLLoginWeixin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginWeixin.route)
}

// .protos.LoginWeixin param = 2;
inline bool CLLoginWeixin::has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline void CLLoginWeixin::clear_param() {
  if (GetArenaNoVirtual() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::protos::LoginWeixin& CLLoginWeixin::param() const {
  const ::protos::LoginWeixin* p = param_;
  // @@protoc_insertion_point(field_get:protos.CLLoginWeixin.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginWeixin*>(
      &::protos::_LoginWeixin_default_instance_);
}
inline ::protos::LoginWeixin* CLLoginWeixin::release_param() {
  // @@protoc_insertion_point(field_release:protos.CLLoginWeixin.param)
  
  ::protos::LoginWeixin* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::protos::LoginWeixin* CLLoginWeixin::mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginWeixin>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.CLLoginWeixin.param)
  return param_;
}
inline void CLLoginWeixin::set_allocated_param(::protos::LoginWeixin* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginWeixin.param)
}

// -------------------------------------------------------------------

// LCLoginWeixin

// int32 error = 1;
inline void LCLoginWeixin::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCLoginWeixin::error() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.error)
  return error_;
}
inline void LCLoginWeixin::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.error)
}

// string errmsg = 2;
inline void LCLoginWeixin::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginWeixin::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCLoginWeixin::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.errmsg)
}
#if LANG_CXX11
inline void LCLoginWeixin::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginWeixin.errmsg)
}
#endif
inline void LCLoginWeixin::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginWeixin.errmsg)
}
inline void LCLoginWeixin::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginWeixin.errmsg)
}
inline ::std::string* LCLoginWeixin::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginWeixin.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginWeixin::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCLoginWeixin.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginWeixin::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginWeixin.errmsg)
}

// int64 userid = 3;
inline void LCLoginWeixin::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLoginWeixin::userid() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.userid)
  return userid_;
}
inline void LCLoginWeixin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.userid)
}

// .protos.LoginRoute route = 4;
inline bool LCLoginWeixin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void LCLoginWeixin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& LCLoginWeixin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* LCLoginWeixin::release_route() {
  // @@protoc_insertion_point(field_release:protos.LCLoginWeixin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* LCLoginWeixin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.LCLoginWeixin.route)
  return route_;
}
inline void LCLoginWeixin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginWeixin.route)
}

// string login_key = 5;
inline void LCLoginWeixin::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginWeixin::login_key() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.login_key)
  return login_key_.GetNoArena();
}
inline void LCLoginWeixin::set_login_key(const ::std::string& value) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.login_key)
}
#if LANG_CXX11
inline void LCLoginWeixin::set_login_key(::std::string&& value) {
  
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginWeixin.login_key)
}
#endif
inline void LCLoginWeixin::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginWeixin.login_key)
}
inline void LCLoginWeixin::set_login_key(const char* value, size_t size) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginWeixin.login_key)
}
inline ::std::string* LCLoginWeixin::mutable_login_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginWeixin.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginWeixin::release_login_key() {
  // @@protoc_insertion_point(field_release:protos.LCLoginWeixin.login_key)
  
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginWeixin::set_allocated_login_key(::std::string* login_key) {
  if (login_key != nullptr) {
    
  } else {
    
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginWeixin.login_key)
}

// string wx_openid = 6;
inline void LCLoginWeixin::clear_wx_openid() {
  wx_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginWeixin::wx_openid() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.wx_openid)
  return wx_openid_.GetNoArena();
}
inline void LCLoginWeixin::set_wx_openid(const ::std::string& value) {
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.wx_openid)
}
#if LANG_CXX11
inline void LCLoginWeixin::set_wx_openid(::std::string&& value) {
  
  wx_openid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginWeixin.wx_openid)
}
#endif
inline void LCLoginWeixin::set_wx_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginWeixin.wx_openid)
}
inline void LCLoginWeixin::set_wx_openid(const char* value, size_t size) {
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginWeixin.wx_openid)
}
inline ::std::string* LCLoginWeixin::mutable_wx_openid() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginWeixin.wx_openid)
  return wx_openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginWeixin::release_wx_openid() {
  // @@protoc_insertion_point(field_release:protos.LCLoginWeixin.wx_openid)
  
  return wx_openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginWeixin::set_allocated_wx_openid(::std::string* wx_openid) {
  if (wx_openid != nullptr) {
    
  } else {
    
  }
  wx_openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wx_openid);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginWeixin.wx_openid)
}

// int32 wx_errcode = 7;
inline void LCLoginWeixin::clear_wx_errcode() {
  wx_errcode_ = 0;
}
inline ::google::protobuf::int32 LCLoginWeixin::wx_errcode() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.wx_errcode)
  return wx_errcode_;
}
inline void LCLoginWeixin::set_wx_errcode(::google::protobuf::int32 value) {
  
  wx_errcode_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.wx_errcode)
}

// string wx_errmsg = 8;
inline void LCLoginWeixin::clear_wx_errmsg() {
  wx_errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginWeixin::wx_errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginWeixin.wx_errmsg)
  return wx_errmsg_.GetNoArena();
}
inline void LCLoginWeixin::set_wx_errmsg(const ::std::string& value) {
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginWeixin.wx_errmsg)
}
#if LANG_CXX11
inline void LCLoginWeixin::set_wx_errmsg(::std::string&& value) {
  
  wx_errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginWeixin.wx_errmsg)
}
#endif
inline void LCLoginWeixin::set_wx_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginWeixin.wx_errmsg)
}
inline void LCLoginWeixin::set_wx_errmsg(const char* value, size_t size) {
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginWeixin.wx_errmsg)
}
inline ::std::string* LCLoginWeixin::mutable_wx_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginWeixin.wx_errmsg)
  return wx_errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginWeixin::release_wx_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCLoginWeixin.wx_errmsg)
  
  return wx_errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginWeixin::set_allocated_wx_errmsg(::std::string* wx_errmsg) {
  if (wx_errmsg != nullptr) {
    
  } else {
    
  }
  wx_errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wx_errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginWeixin.wx_errmsg)
}

// -------------------------------------------------------------------

// L2SDKLoginWeixin

// .protos.LoginRoute route = 1;
inline bool L2SDKLoginWeixin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void L2SDKLoginWeixin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& L2SDKLoginWeixin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.L2SDKLoginWeixin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* L2SDKLoginWeixin::release_route() {
  // @@protoc_insertion_point(field_release:protos.L2SDKLoginWeixin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* L2SDKLoginWeixin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.L2SDKLoginWeixin.route)
  return route_;
}
inline void L2SDKLoginWeixin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.L2SDKLoginWeixin.route)
}

// int64 link_sessionid = 2;
inline void L2SDKLoginWeixin::clear_link_sessionid() {
  link_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 L2SDKLoginWeixin::link_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.L2SDKLoginWeixin.link_sessionid)
  return link_sessionid_;
}
inline void L2SDKLoginWeixin::set_link_sessionid(::google::protobuf::int64 value) {
  
  link_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.L2SDKLoginWeixin.link_sessionid)
}

// .protos.LoginWeixin param = 3;
inline bool L2SDKLoginWeixin::has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline void L2SDKLoginWeixin::clear_param() {
  if (GetArenaNoVirtual() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::protos::LoginWeixin& L2SDKLoginWeixin::param() const {
  const ::protos::LoginWeixin* p = param_;
  // @@protoc_insertion_point(field_get:protos.L2SDKLoginWeixin.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginWeixin*>(
      &::protos::_LoginWeixin_default_instance_);
}
inline ::protos::LoginWeixin* L2SDKLoginWeixin::release_param() {
  // @@protoc_insertion_point(field_release:protos.L2SDKLoginWeixin.param)
  
  ::protos::LoginWeixin* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::protos::LoginWeixin* L2SDKLoginWeixin::mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginWeixin>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.L2SDKLoginWeixin.param)
  return param_;
}
inline void L2SDKLoginWeixin::set_allocated_param(::protos::LoginWeixin* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:protos.L2SDKLoginWeixin.param)
}

// -------------------------------------------------------------------

// SDK2LLoginWeixin

// int32 error = 1;
inline void SDK2LLoginWeixin::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 SDK2LLoginWeixin::error() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.error)
  return error_;
}
inline void SDK2LLoginWeixin::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.error)
}

// string errmsg = 2;
inline void SDK2LLoginWeixin::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDK2LLoginWeixin::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.errmsg)
  return errmsg_.GetNoArena();
}
inline void SDK2LLoginWeixin::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.errmsg)
}
#if LANG_CXX11
inline void SDK2LLoginWeixin::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SDK2LLoginWeixin.errmsg)
}
#endif
inline void SDK2LLoginWeixin::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SDK2LLoginWeixin.errmsg)
}
inline void SDK2LLoginWeixin::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SDK2LLoginWeixin.errmsg)
}
inline ::std::string* SDK2LLoginWeixin::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDK2LLoginWeixin::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDK2LLoginWeixin::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.errmsg)
}

// .protos.LoginRoute route = 3;
inline bool SDK2LLoginWeixin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void SDK2LLoginWeixin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& SDK2LLoginWeixin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* SDK2LLoginWeixin::release_route() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* SDK2LLoginWeixin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.route)
  return route_;
}
inline void SDK2LLoginWeixin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.route)
}

// int64 link_sessionid = 4;
inline void SDK2LLoginWeixin::clear_link_sessionid() {
  link_sessionid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SDK2LLoginWeixin::link_sessionid() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.link_sessionid)
  return link_sessionid_;
}
inline void SDK2LLoginWeixin::set_link_sessionid(::google::protobuf::int64 value) {
  
  link_sessionid_ = value;
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.link_sessionid)
}

// .protos.LoginWeixin param = 5;
inline bool SDK2LLoginWeixin::has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline void SDK2LLoginWeixin::clear_param() {
  if (GetArenaNoVirtual() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::protos::LoginWeixin& SDK2LLoginWeixin::param() const {
  const ::protos::LoginWeixin* p = param_;
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginWeixin*>(
      &::protos::_LoginWeixin_default_instance_);
}
inline ::protos::LoginWeixin* SDK2LLoginWeixin::release_param() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.param)
  
  ::protos::LoginWeixin* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::protos::LoginWeixin* SDK2LLoginWeixin::mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginWeixin>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.param)
  return param_;
}
inline void SDK2LLoginWeixin::set_allocated_param(::protos::LoginWeixin* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.param)
}

// string wx_openid = 6;
inline void SDK2LLoginWeixin::clear_wx_openid() {
  wx_openid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDK2LLoginWeixin::wx_openid() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.wx_openid)
  return wx_openid_.GetNoArena();
}
inline void SDK2LLoginWeixin::set_wx_openid(const ::std::string& value) {
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.wx_openid)
}
#if LANG_CXX11
inline void SDK2LLoginWeixin::set_wx_openid(::std::string&& value) {
  
  wx_openid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SDK2LLoginWeixin.wx_openid)
}
#endif
inline void SDK2LLoginWeixin::set_wx_openid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SDK2LLoginWeixin.wx_openid)
}
inline void SDK2LLoginWeixin::set_wx_openid(const char* value, size_t size) {
  
  wx_openid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SDK2LLoginWeixin.wx_openid)
}
inline ::std::string* SDK2LLoginWeixin::mutable_wx_openid() {
  
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.wx_openid)
  return wx_openid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDK2LLoginWeixin::release_wx_openid() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.wx_openid)
  
  return wx_openid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDK2LLoginWeixin::set_allocated_wx_openid(::std::string* wx_openid) {
  if (wx_openid != nullptr) {
    
  } else {
    
  }
  wx_openid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wx_openid);
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.wx_openid)
}

// string wx_session_key = 7;
inline void SDK2LLoginWeixin::clear_wx_session_key() {
  wx_session_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDK2LLoginWeixin::wx_session_key() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.wx_session_key)
  return wx_session_key_.GetNoArena();
}
inline void SDK2LLoginWeixin::set_wx_session_key(const ::std::string& value) {
  
  wx_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.wx_session_key)
}
#if LANG_CXX11
inline void SDK2LLoginWeixin::set_wx_session_key(::std::string&& value) {
  
  wx_session_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SDK2LLoginWeixin.wx_session_key)
}
#endif
inline void SDK2LLoginWeixin::set_wx_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wx_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SDK2LLoginWeixin.wx_session_key)
}
inline void SDK2LLoginWeixin::set_wx_session_key(const char* value, size_t size) {
  
  wx_session_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SDK2LLoginWeixin.wx_session_key)
}
inline ::std::string* SDK2LLoginWeixin::mutable_wx_session_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.wx_session_key)
  return wx_session_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDK2LLoginWeixin::release_wx_session_key() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.wx_session_key)
  
  return wx_session_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDK2LLoginWeixin::set_allocated_wx_session_key(::std::string* wx_session_key) {
  if (wx_session_key != nullptr) {
    
  } else {
    
  }
  wx_session_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wx_session_key);
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.wx_session_key)
}

// int32 wx_errcode = 8;
inline void SDK2LLoginWeixin::clear_wx_errcode() {
  wx_errcode_ = 0;
}
inline ::google::protobuf::int32 SDK2LLoginWeixin::wx_errcode() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.wx_errcode)
  return wx_errcode_;
}
inline void SDK2LLoginWeixin::set_wx_errcode(::google::protobuf::int32 value) {
  
  wx_errcode_ = value;
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.wx_errcode)
}

// string wx_errmsg = 9;
inline void SDK2LLoginWeixin::clear_wx_errmsg() {
  wx_errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SDK2LLoginWeixin::wx_errmsg() const {
  // @@protoc_insertion_point(field_get:protos.SDK2LLoginWeixin.wx_errmsg)
  return wx_errmsg_.GetNoArena();
}
inline void SDK2LLoginWeixin::set_wx_errmsg(const ::std::string& value) {
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.SDK2LLoginWeixin.wx_errmsg)
}
#if LANG_CXX11
inline void SDK2LLoginWeixin::set_wx_errmsg(::std::string&& value) {
  
  wx_errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.SDK2LLoginWeixin.wx_errmsg)
}
#endif
inline void SDK2LLoginWeixin::set_wx_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.SDK2LLoginWeixin.wx_errmsg)
}
inline void SDK2LLoginWeixin::set_wx_errmsg(const char* value, size_t size) {
  
  wx_errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.SDK2LLoginWeixin.wx_errmsg)
}
inline ::std::string* SDK2LLoginWeixin::mutable_wx_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.SDK2LLoginWeixin.wx_errmsg)
  return wx_errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SDK2LLoginWeixin::release_wx_errmsg() {
  // @@protoc_insertion_point(field_release:protos.SDK2LLoginWeixin.wx_errmsg)
  
  return wx_errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SDK2LLoginWeixin::set_allocated_wx_errmsg(::std::string* wx_errmsg) {
  if (wx_errmsg != nullptr) {
    
  } else {
    
  }
  wx_errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wx_errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.SDK2LLoginWeixin.wx_errmsg)
}

// -------------------------------------------------------------------

// LoginFacebook

// string deviceid = 1;
inline void LoginFacebook::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginFacebook::deviceid() const {
  // @@protoc_insertion_point(field_get:protos.LoginFacebook.deviceid)
  return deviceid_.GetNoArena();
}
inline void LoginFacebook::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginFacebook.deviceid)
}
#if LANG_CXX11
inline void LoginFacebook::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginFacebook.deviceid)
}
#endif
inline void LoginFacebook::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginFacebook.deviceid)
}
inline void LoginFacebook::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginFacebook.deviceid)
}
inline ::std::string* LoginFacebook::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginFacebook.deviceid)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginFacebook::release_deviceid() {
  // @@protoc_insertion_point(field_release:protos.LoginFacebook.deviceid)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginFacebook::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != nullptr) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginFacebook.deviceid)
}

// string ip = 2;
inline void LoginFacebook::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginFacebook::ip() const {
  // @@protoc_insertion_point(field_get:protos.LoginFacebook.ip)
  return ip_.GetNoArena();
}
inline void LoginFacebook::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginFacebook.ip)
}
#if LANG_CXX11
inline void LoginFacebook::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginFacebook.ip)
}
#endif
inline void LoginFacebook::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginFacebook.ip)
}
inline void LoginFacebook::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginFacebook.ip)
}
inline ::std::string* LoginFacebook::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginFacebook.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginFacebook::release_ip() {
  // @@protoc_insertion_point(field_release:protos.LoginFacebook.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginFacebook::set_allocated_ip(::std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginFacebook.ip)
}

// string code = 3;
inline void LoginFacebook::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginFacebook::code() const {
  // @@protoc_insertion_point(field_get:protos.LoginFacebook.code)
  return code_.GetNoArena();
}
inline void LoginFacebook::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LoginFacebook.code)
}
#if LANG_CXX11
inline void LoginFacebook::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LoginFacebook.code)
}
#endif
inline void LoginFacebook::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LoginFacebook.code)
}
inline void LoginFacebook::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LoginFacebook.code)
}
inline ::std::string* LoginFacebook::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:protos.LoginFacebook.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginFacebook::release_code() {
  // @@protoc_insertion_point(field_release:protos.LoginFacebook.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginFacebook::set_allocated_code(::std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protos.LoginFacebook.code)
}

// -------------------------------------------------------------------

// CLLoginFacebook

// .protos.LoginRoute route = 1;
inline bool CLLoginFacebook::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void CLLoginFacebook::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& CLLoginFacebook::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.CLLoginFacebook.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* CLLoginFacebook::release_route() {
  // @@protoc_insertion_point(field_release:protos.CLLoginFacebook.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* CLLoginFacebook::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.CLLoginFacebook.route)
  return route_;
}
inline void CLLoginFacebook::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginFacebook.route)
}

// .protos.LoginFacebook param = 2;
inline bool CLLoginFacebook::has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline void CLLoginFacebook::clear_param() {
  if (GetArenaNoVirtual() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::protos::LoginFacebook& CLLoginFacebook::param() const {
  const ::protos::LoginFacebook* p = param_;
  // @@protoc_insertion_point(field_get:protos.CLLoginFacebook.param)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginFacebook*>(
      &::protos::_LoginFacebook_default_instance_);
}
inline ::protos::LoginFacebook* CLLoginFacebook::release_param() {
  // @@protoc_insertion_point(field_release:protos.CLLoginFacebook.param)
  
  ::protos::LoginFacebook* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::protos::LoginFacebook* CLLoginFacebook::mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginFacebook>(GetArenaNoVirtual());
    param_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.CLLoginFacebook.param)
  return param_;
}
inline void CLLoginFacebook::set_allocated_param(::protos::LoginFacebook* param) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      param = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:protos.CLLoginFacebook.param)
}

// -------------------------------------------------------------------

// LCLoginFacebook

// int32 error = 1;
inline void LCLoginFacebook::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCLoginFacebook::error() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginFacebook.error)
  return error_;
}
inline void LCLoginFacebook::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginFacebook.error)
}

// string errmsg = 2;
inline void LCLoginFacebook::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginFacebook::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginFacebook.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCLoginFacebook::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginFacebook.errmsg)
}
#if LANG_CXX11
inline void LCLoginFacebook::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginFacebook.errmsg)
}
#endif
inline void LCLoginFacebook::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginFacebook.errmsg)
}
inline void LCLoginFacebook::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginFacebook.errmsg)
}
inline ::std::string* LCLoginFacebook::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginFacebook.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginFacebook::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCLoginFacebook.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginFacebook::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginFacebook.errmsg)
}

// int64 userid = 3;
inline void LCLoginFacebook::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCLoginFacebook::userid() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginFacebook.userid)
  return userid_;
}
inline void LCLoginFacebook::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCLoginFacebook.userid)
}

// .protos.LoginRoute route = 4;
inline bool LCLoginFacebook::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void LCLoginFacebook::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& LCLoginFacebook::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.LCLoginFacebook.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* LCLoginFacebook::release_route() {
  // @@protoc_insertion_point(field_release:protos.LCLoginFacebook.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* LCLoginFacebook::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.LCLoginFacebook.route)
  return route_;
}
inline void LCLoginFacebook::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginFacebook.route)
}

// string login_key = 5;
inline void LCLoginFacebook::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCLoginFacebook::login_key() const {
  // @@protoc_insertion_point(field_get:protos.LCLoginFacebook.login_key)
  return login_key_.GetNoArena();
}
inline void LCLoginFacebook::set_login_key(const ::std::string& value) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCLoginFacebook.login_key)
}
#if LANG_CXX11
inline void LCLoginFacebook::set_login_key(::std::string&& value) {
  
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCLoginFacebook.login_key)
}
#endif
inline void LCLoginFacebook::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCLoginFacebook.login_key)
}
inline void LCLoginFacebook::set_login_key(const char* value, size_t size) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCLoginFacebook.login_key)
}
inline ::std::string* LCLoginFacebook::mutable_login_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCLoginFacebook.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCLoginFacebook::release_login_key() {
  // @@protoc_insertion_point(field_release:protos.LCLoginFacebook.login_key)
  
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCLoginFacebook::set_allocated_login_key(::std::string* login_key) {
  if (login_key != nullptr) {
    
  } else {
    
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:protos.LCLoginFacebook.login_key)
}

// -------------------------------------------------------------------

// CLReconnLogin

// .protos.LoginRoute route = 1;
inline bool CLReconnLogin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void CLReconnLogin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& CLReconnLogin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.CLReconnLogin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* CLReconnLogin::release_route() {
  // @@protoc_insertion_point(field_release:protos.CLReconnLogin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* CLReconnLogin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.CLReconnLogin.route)
  return route_;
}
inline void CLReconnLogin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.CLReconnLogin.route)
}

// string login_key = 2;
inline void CLReconnLogin::clear_login_key() {
  login_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CLReconnLogin::login_key() const {
  // @@protoc_insertion_point(field_get:protos.CLReconnLogin.login_key)
  return login_key_.GetNoArena();
}
inline void CLReconnLogin::set_login_key(const ::std::string& value) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.CLReconnLogin.login_key)
}
#if LANG_CXX11
inline void CLReconnLogin::set_login_key(::std::string&& value) {
  
  login_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.CLReconnLogin.login_key)
}
#endif
inline void CLReconnLogin::set_login_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.CLReconnLogin.login_key)
}
inline void CLReconnLogin::set_login_key(const char* value, size_t size) {
  
  login_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.CLReconnLogin.login_key)
}
inline ::std::string* CLReconnLogin::mutable_login_key() {
  
  // @@protoc_insertion_point(field_mutable:protos.CLReconnLogin.login_key)
  return login_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CLReconnLogin::release_login_key() {
  // @@protoc_insertion_point(field_release:protos.CLReconnLogin.login_key)
  
  return login_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CLReconnLogin::set_allocated_login_key(::std::string* login_key) {
  if (login_key != nullptr) {
    
  } else {
    
  }
  login_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), login_key);
  // @@protoc_insertion_point(field_set_allocated:protos.CLReconnLogin.login_key)
}

// -------------------------------------------------------------------

// LCReconnLogin

// int32 error = 1;
inline void LCReconnLogin::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 LCReconnLogin::error() const {
  // @@protoc_insertion_point(field_get:protos.LCReconnLogin.error)
  return error_;
}
inline void LCReconnLogin::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.LCReconnLogin.error)
}

// string errmsg = 2;
inline void LCReconnLogin::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LCReconnLogin::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.LCReconnLogin.errmsg)
  return errmsg_.GetNoArena();
}
inline void LCReconnLogin::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.LCReconnLogin.errmsg)
}
#if LANG_CXX11
inline void LCReconnLogin::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.LCReconnLogin.errmsg)
}
#endif
inline void LCReconnLogin::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.LCReconnLogin.errmsg)
}
inline void LCReconnLogin::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.LCReconnLogin.errmsg)
}
inline ::std::string* LCReconnLogin::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.LCReconnLogin.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LCReconnLogin::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.LCReconnLogin.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LCReconnLogin::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.LCReconnLogin.errmsg)
}

// int64 userid = 3;
inline void LCReconnLogin::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 LCReconnLogin::userid() const {
  // @@protoc_insertion_point(field_get:protos.LCReconnLogin.userid)
  return userid_;
}
inline void LCReconnLogin::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.LCReconnLogin.userid)
}

// .protos.LoginRoute route = 4;
inline bool LCReconnLogin::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void LCReconnLogin::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::protos::LoginRoute& LCReconnLogin::route() const {
  const ::protos::LoginRoute* p = route_;
  // @@protoc_insertion_point(field_get:protos.LCReconnLogin.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::protos::LoginRoute*>(
      &::protos::_LoginRoute_default_instance_);
}
inline ::protos::LoginRoute* LCReconnLogin::release_route() {
  // @@protoc_insertion_point(field_release:protos.LCReconnLogin.route)
  
  ::protos::LoginRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::protos::LoginRoute* LCReconnLogin::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::LoginRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protos.LCReconnLogin.route)
  return route_;
}
inline void LCReconnLogin::set_allocated_route(::protos::LoginRoute* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:protos.LCReconnLogin.route)
}

// -------------------------------------------------------------------

// Link2LDisconnect

// int64 userid = 1;
inline void Link2LDisconnect::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 Link2LDisconnect::userid() const {
  // @@protoc_insertion_point(field_get:protos.Link2LDisconnect.userid)
  return userid_;
}
inline void Link2LDisconnect::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.Link2LDisconnect.userid)
}

// -------------------------------------------------------------------

// L2LinkDisconnect

// int32 error = 1;
inline void L2LinkDisconnect::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 L2LinkDisconnect::error() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkDisconnect.error)
  return error_;
}
inline void L2LinkDisconnect::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.L2LinkDisconnect.error)
}

// string errmsg = 2;
inline void L2LinkDisconnect::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& L2LinkDisconnect::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkDisconnect.errmsg)
  return errmsg_.GetNoArena();
}
inline void L2LinkDisconnect::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.L2LinkDisconnect.errmsg)
}
#if LANG_CXX11
inline void L2LinkDisconnect::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.L2LinkDisconnect.errmsg)
}
#endif
inline void L2LinkDisconnect::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.L2LinkDisconnect.errmsg)
}
inline void L2LinkDisconnect::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.L2LinkDisconnect.errmsg)
}
inline ::std::string* L2LinkDisconnect::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.L2LinkDisconnect.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* L2LinkDisconnect::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.L2LinkDisconnect.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void L2LinkDisconnect::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.L2LinkDisconnect.errmsg)
}

// int64 userid = 3;
inline void L2LinkDisconnect::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 L2LinkDisconnect::userid() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkDisconnect.userid)
  return userid_;
}
inline void L2LinkDisconnect::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.L2LinkDisconnect.userid)
}

// -------------------------------------------------------------------

// L2LinkKickPlayer

// int32 error = 1;
inline void L2LinkKickPlayer::clear_error() {
  error_ = 0;
}
inline ::google::protobuf::int32 L2LinkKickPlayer::error() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkKickPlayer.error)
  return error_;
}
inline void L2LinkKickPlayer::set_error(::google::protobuf::int32 value) {
  
  error_ = value;
  // @@protoc_insertion_point(field_set:protos.L2LinkKickPlayer.error)
}

// string errmsg = 2;
inline void L2LinkKickPlayer::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& L2LinkKickPlayer::errmsg() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkKickPlayer.errmsg)
  return errmsg_.GetNoArena();
}
inline void L2LinkKickPlayer::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protos.L2LinkKickPlayer.errmsg)
}
#if LANG_CXX11
inline void L2LinkKickPlayer::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protos.L2LinkKickPlayer.errmsg)
}
#endif
inline void L2LinkKickPlayer::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protos.L2LinkKickPlayer.errmsg)
}
inline void L2LinkKickPlayer::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protos.L2LinkKickPlayer.errmsg)
}
inline ::std::string* L2LinkKickPlayer::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:protos.L2LinkKickPlayer.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* L2LinkKickPlayer::release_errmsg() {
  // @@protoc_insertion_point(field_release:protos.L2LinkKickPlayer.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void L2LinkKickPlayer::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:protos.L2LinkKickPlayer.errmsg)
}

// int64 userid = 3;
inline void L2LinkKickPlayer::clear_userid() {
  userid_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 L2LinkKickPlayer::userid() const {
  // @@protoc_insertion_point(field_get:protos.L2LinkKickPlayer.userid)
  return userid_;
}
inline void L2LinkKickPlayer::set_userid(::google::protobuf::int64 value) {
  
  userid_ = value;
  // @@protoc_insertion_point(field_set:protos.L2LinkKickPlayer.userid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_login2sdk_2eproto
